{"mappings":"I,E,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCQA,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFmB,SAAS,gBAAgB,CAAC,W,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAEtC,OAAO,CAAC,SAAC,CAAhB,EACM,EAAM,IAAI,CAAC,QAAQ,CAAC,SACtB,CAAA,EAAM,IAAI,CAAG,EAAM,IAAI,CAAC,OAAO,CAAC,IAAK,KADvC,EAKA,EAAM,YAAY,CAAC,cAAgB,GAAa,MAAA,CAAX,EAAM,IAAI,GAE/C,IAAM,EAAS,mCAAgD,MAAA,CAAd,EAAM,EAAE,CAAC,OAAgB,MAAA,CAAX,EAAM,IAAI,CAAC,aAE1E,EAAM,kBAAkB,CAAC,cAAe,EAC1C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n//  <label for=\"cheese\">Do you like cheese?</label>\n// debugger;\nvar inputs = _to_consumable_array(document.querySelectorAll(\"input\"));\ninputs.forEach(function(input) {\n    if (input.name.includes(\"Name\")) input.name = input.name.replace(\"t\", \"t \");\n    // well... FirstName or First Name ?\n    input.setAttribute(\"placeholder\", \"\".concat(input.name));\n    var LABEL = '<label class=\"field-label\" for= '.concat(input.id, \" > \").concat(input.name, \" </label>\");\n    input.insertAdjacentHTML(\"beforebegin\", LABEL);\n});\n\n//# sourceMappingURL=index.4cbc2699.js.map\n","'use strict';\n\n//  <label for=\"cheese\">Do you like cheese?</label>\n\n// debugger;\n\nconst inputs = [...document.querySelectorAll('input')];\n\ninputs.forEach((input) => {\n  if (input.name.includes('Name')) {\n    input.name = input.name.replace('t', 't ');\n  }\n  // well... FirstName or First Name ?\n\n  input.setAttribute('placeholder', `${input.name}`);\n\n  const LABEL = `<label class=\"field-label\" for= ${input.id} > ${input.name} </label>`;\n\n  input.insertAdjacentHTML('beforebegin', LABEL);\n});\n"],"names":["arr","_array_like_to_array","len","length","i","arr2","Array","inputs","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","forEach","input","includes","replace","setAttribute","concat","LABEL","id","insertAdjacentHTML"],"version":3,"file":"index.4cbc2699.js.map"}